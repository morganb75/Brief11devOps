name: Rust Pipeline

on:
  push:
    branches:
      - main
      - beta

permissions:
  contents: write

jobs:
# Obtention de la version du projet
  get-version:
    uses: shiipou/github-actions/.github/workflows/get-version.yml@main
    with:
      release-branches: '^(main)$'
  

  Rust-build: 
    name: Rust build
    runs-on: ubuntu-latest
    if: ${{ needs.get-version.outputs.will-release == 'true' }}
    needs: 
      - get-version
    steps:

# Copie du code source
      - name: Checkout files
        uses: actions/checkout@v4.2.1
# Installation de rust toolchain
      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable
          override: true
# check version de rust
      - name: check rust version
        run: rustc --version
        # check version de rust
      - name: check rustup version
        run: rustup --version
# # Install wasm
      - name: Install Wasm
        run: rustup target add wasm32-unknown-unknown
# # Installtrunk
      - name: Install trunk (trunk-action)
        uses: jetli/trunk-action@v0.5.0
# # Build de wasm
      - name: Build 
        run: trunk build --release
# # Upload artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: dist/

# # Test Print changelog
#       - name: View Changelog
#         run: cat changelog.txt
        
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [ get-version, Rust-build ]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist/
      - name: Zip artifact
        run: zip -r rust-app.zip dist/*
         # Print changelog
      - name: Print changelog
        run: echo "${{ needs.get-version.outputs.changelogs }}" >> changelog.txt
      - name: Create Github Release
        env:
          GH_TOKEN: "${{ github.token }}"
          VERSION: "${{ needs.get-version.outputs.version }}"
          REPO: "${{ github.repository }}"
          COMMIT: "${{ github.sha }}"
        run: |
          if [ "${{ needs.get-version.outputs.is-prerelease }}" == "true" ] 
          then
            gh release create --prerelease --repo $REPO --target $COMMIT -F changelog.txt $VERSION rust-app.zip
          else
            gh release create --repo $REPO --target $COMMIT -F changelog.txt $VERSION rust-app.zip
          fi

          

    
    


    
